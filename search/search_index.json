{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geonate","text":"<p>Python package synthesizes conventional tools and codes for image processing</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://canng.github.io/geonate</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/canng/geonate/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geonate could always use more documentation, whether as part of the official geonate docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/canng/geonate/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geonate for local development.</p> <ol> <li> <p>Fork the geonate repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geonate.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geonate\n$ cd geonate/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geonate tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/canng/geonate/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geonate/","title":"geonate module","text":"<p>Main module.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geonate, run this command in your terminal:</p> <pre><code>pip install geonate\n</code></pre> <p>This is the preferred method to install geonate, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install geonate from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/canng/geonate\n</code></pre>"},{"location":"tool/","title":"tool module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"tool/#geonate.tool.dataframe","title":"<code>dataframe(nrows, ncols, value='NA', name=None)</code>","text":"<p>Create an empty dataframe</p> <p>Parameters:</p> Name Type Description Default <code>nrows</code> <p>numeric, numbers of rows</p> required <code>ncols</code> <p>numeric, number of columns</p> required <code>value</code> <p>input value in all cells, default is NA</p> <code>'NA'</code> <code>name</code> <p>vector, names of columns, if not given, it will return default as number of column</p> <code>None</code> <p>Examples:</p> <p>data = tools.dataframe(nrows= 5, ncols= 2, name= ['Col1', 'Col2'])</p> Source code in <code>geonate/tool.py</code> <pre><code>def dataframe(nrows, ncols, value='NA', name=None):\n    '''\n    Create an empty dataframe\n\n    Parameters:\n        nrows: numeric, numbers of rows\n        ncols: numeric, number of columns\n        value: input value in all cells, default is NA\n        name: vector, names of columns, if not given, it will return default as number of column\n\n    Example:\n        data = tools.dataframe(nrows= 5, ncols= 2, name= ['Col1', 'Col2'])\n\n    '''\n    import pandas as pd\n    import numpy as np\n\n    # Check validity of column name\n    if name is None:\n        column_names = [f'Col_{i+1}' for i in range(ncols)]\n    elif len(name) == ncols:\n        column_names = name\n    else:\n        raise ValueError(\"Length of column names vector must match numbers of columns\")\n\n    # check input value\n    try: \n        if isinstance(value, int):\n            val = value\n        elif isinstance(value, float):\n            val = value\n        else:\n            val = np.nan\n    except ValueError:\n        val = np.nan\n\n    # Create data and parse it into dataframe \n    data = [[val] * ncols for _ in range(nrows)]\n    dataframe = pd.DataFrame(data, columns= column_names)\n\n    return dataframe\n</code></pre>"},{"location":"tool/#geonate.tool.extent","title":"<code>extent(input, poly=True)</code>","text":"<p>Get spatial extent of geotif image from a list or local variable</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>~AnyStr</code> <p>string, an input as a list of geotif files or local image/shapefile</p> required <code>poly</code> <code>bool</code> <p>bool, whether returns the extent polygon as geopandas object</p> <code>True</code> <p>Examples:</p> <p>files = tools.list_files('./landsat_multi/merge/', 'tif') ext, poly = tools.extent(files)</p> Source code in <code>geonate/tool.py</code> <pre><code>def extent(input: AnyStr, poly: bool= True):\n    '''\n    Get spatial extent of geotif image from a list or local variable\n\n    Parameters:\n        input: string, an input as a list of geotif files or local image/shapefile\n        poly: bool, whether returns the extent polygon as geopandas object\n\n    Example:\n        files = tools.list_files('./landsat_multi/merge/', 'tif')\n        ext, poly = tools.extent(files)\n\n    '''\n    import rasterio\n    import geopandas as gpd\n    from shapely.geometry import Polygon\n\n    general_extent = None\n\n    # get extent for raster files store in folder\n    if (isinstance(input, list)) or (isinstance(input, str)):\n        for file in input:\n            with rasterio.open(file) as src:\n                ext = src.bounds\n                crs = src.crs\n\n                if general_extent is None:\n                    general_extent = ext\n                else:\n                    general_extent =  (\n                        min(general_extent[0], ext[0]),\n                        min(general_extent[1], ext[1]),\n                        max(general_extent[2], ext[2]),\n                        max(general_extent[3], ext[3])\n                        )\n\n    # get extent for local read shapefile    \n    elif isinstance(input, gpd.GeoDataFrame):\n        ext = input.bounds\n        crs = input.crs\n        general_extent = (ext['minx'], ext['miny'],\n                                        ext['maxx'], ext['maxy'])\n\n    # get extent for local read geotif \n    else:\n        general_extent = input.bounds\n        crs = input.crs\n\n    # return rectangle of extennt\n    if poly is True:\n        poly_geom = Polygon([\n            (general_extent[0], general_extent[1]), \n            (general_extent[2], general_extent[1]), \n            (general_extent[2], general_extent[3]), \n            (general_extent[0], general_extent[3])\n            ])\n        poly = gpd.GeoDataFrame(index=[0], geometry=[poly_geom])\n        poly.crs = {'init': crs}\n    else: \n        poly = None\n\n    return general_extent, poly\n</code></pre>"},{"location":"tool/#geonate.tool.listFiles","title":"<code>listFiles(path, pattern, search_type='pattern', full_name=True)</code>","text":"<p>List all files with specific pattern within a folder path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>~AnyStr</code> <p>string, folder path where files stored</p> required <code>pattern</code> <code>~AnyStr</code> <p>string, search pattern of files (e.g., '*.tif')</p> required <code>search_type</code> <code>~AnyStr</code> <p>string, search type whether by \"extension\" or name \"pattern\"</p> <code>'pattern'</code> <code>full_name</code> <code>bool</code> <p>boolean, whether returning full name with path detail or not</p> <code>True</code> <p>Examples:</p> <p>files = tools.list_files(path= './Sample_data/shapefile/', pattern='*shp')</p> Source code in <code>geonate/tool.py</code> <pre><code>def listFiles(path: AnyStr, pattern: AnyStr, search_type: AnyStr = 'pattern', full_name: bool=True):\n    '''\n    List all files with specific pattern within a folder path\n\n    Parameters:\n        path: string, folder path where files stored\n        pattern: string, search pattern of files (e.g., '*.tif')\n        search_type: string, search type whether by \"extension\" or name \"pattern\"\n        full_name: boolean, whether returning full name with path detail or not\n\n    Example:\n        files = tools.list_files(path= './Sample_data/shapefile/', pattern='*shp')\n\n    '''\n    import os\n    import fnmatch\n\n    # Create empty list to store list of files\n    files_list = []\n\n    # Check search type\n    if (search_type.upper() == 'EXTENSION') or (search_type.upper() == 'E'):\n        if '*' in pattern:\n            raise ValueError(\"Do not use '*' in the pattern of extension search\")\n        else:\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    if file.lower().endswith(pattern):\n                        if full_name is True:\n                            files_list.append(os.path.join(root, file))\n                        else:\n                            files_list.append(file)    \n\n    elif (search_type.upper() == 'PATTERN') or (search_type.upper() == 'P'):\n        if '*' not in pattern:\n            raise ValueError(\"Pattern search requires '*' in pattern\")\n        else:\n            for root, dirs, files in os.walk(path):\n                for file in fnmatch.filter(files, pattern):\n                    if full_name is True:\n                        files_list.append(os.path.join(root, file))\n                    else:\n                        files_list.append(file)\n\n    else:\n        raise ValueError('Search pattern must be one of these types (pattern, p, extension, e)')\n\n    return files_list\n</code></pre>"},{"location":"tool/#geonate.tool.meter2degree","title":"<code>meter2degree(input, latitude)</code>","text":"<p>Convert image resolution from meter to acr-degree depending on location of latitude</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <p>number, input resolution of distance</p> required <code>latitude</code> <p>number, latitude presents location </p> required <p>Examples:</p> <p>degree = raster.meter2degree(30, 10.25)   </p> Source code in <code>geonate/tool.py</code> <pre><code>def meter2degree(input, latitude):\n    '''\n    Convert image resolution from meter to acr-degree depending on location of latitude\n\n    Parameters:\n        input: number, input resolution of distance\n        latitude: number, latitude presents location \n\n    Example:\n       degree = raster.meter2degree(30, 10.25)   \n\n    '''\n    import numpy as np\n    degree = input / (111320 * np.cos(np.radians(latitude)))\n\n    return degree\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geonate in a project:</p> <pre><code>import geonate\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}